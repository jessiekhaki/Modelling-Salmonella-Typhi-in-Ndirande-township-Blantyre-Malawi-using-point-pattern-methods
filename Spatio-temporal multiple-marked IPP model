rm(list=ls()) #remove everything in memory

#----------------------------------------------------------
#- Load required datasets
load("casedata.point.RData")
load("covariates.grid.RData")
load("pop.grid.RData")
load("grid.areaf.RData")
load("grid.casef.RData")

#==================================================================
#create levels for the data
age.levels <- levels(casedata.point$age)
gender.levels <- levels(casedata.point$gender)
month.year.levels <- levels(casedata.point$month.year)
season.levels <- levels(casedata.point$season)

data.subset.fun <- function(casedata.point, names.cov){
  h <- 0
  df.case <- list()
    for (j in 1:length(age.levels)) {
      for(k in 1:length(gender.levels)){
        h <- h+1
        df.case[[h]] <- casedata.point[
                            casedata.point$age == age.levels[j]&
                          casedata.point$gender == gender.levels[k],
                                       names.cov] } }
  return(df.case) }

#we need observations for each time point
df.case <- data.subset.fun(casedata.point, c("distance", "elevation", "wash"))

#=============================================================================
#define the objective function
llik.st <- function(par) {
  
  #define constants
  p <- ncol(covariates.grid) #no of spatial covariates
  time.n <- nlevels(casedata.point$season)+1 #1 for linear trend of time
  age.n <- nlevels(casedata.point$age)
  gender.n <- nlevels(casedata.point$gender)
  delta <- 100 #area of grid cell
  t.n <-  41# THIS SHUOLD BE THE TOTAL NUMBER OF TIME POINTS IN THE DATA
    
  #initialize estimates for model
  beta         <- par[1:p]
  time.coef    <- par[(p+1): (p+time.n)]
  age.coef     <- par[(p+time.n+1) : (p+time.n+age.n) ]
  gender.coef  <- par[(p+time.n+age.n+ 1) : (p+time.n+age.n+gender.n)]
  ll.total     <- rep(0, age.n*gender.n) 
  
  #objective function
  h <- 0
  
  #include monthly temperatures as a covariates
  D.temporal    <- model.matrix(~ -1 + season + t.my , data = casedata.point)
  time.effect <- as.numeric(D.temporal %*% (time.coef))

  for (j in 1:age.n) {
    for (k in 1:gender.n) {
      h <- h + 1
      log.intens <- 0
      intens.grid <- 0
      for(i in 1:t.n) {
        log.intens <- log.intens + sum(
          time.effect[i] + age.coef[j] + gender.coef[k] + 
          as.numeric( as.matrix(df.case[[h]] ) %*% beta) + 
          log( df.pop.case[[h]]/100*100 ) )

        log.intens.grid <-   
          time.effect[i] + age.coef[j] + gender.coef[k] + 
          as.numeric( as.matrix(covariates.grid) %*% beta ) +
          log(pop.grid/100*100)
        
        intens.grid <- intens.grid+exp(log.intens.grid)
      }
      #the objective function
      ll.total[h] <- log.intens -
        delta * sum(intens.grid)
    }  
    
  }

  out <- sum(ll.total)
  return( -out)  
}
  
#Fit the model without the gradient and hessian 
start.st <- c(rep(0,13))
names(start.st) <- c("distance", "elevation", "wash score", #spatial covariates
      "hot dry", "early rain", "late rain", "cool dry", "month.year",
                    "0-5", "6-17", "18+", "female", "male") 

#fit the model
fit.st <- nlminb(start = start.st, objective = llik.st,
                control = list(trace=1) )

#check whether the model has successfully converged (convergence = 0)
fit.st$convergence

#extract the model parameters
par.st <- fit.st$par
par.st
round(par.st,4)
